#!/bin/bash
# Claude Memory System Update Script v2.0
# Updates existing installations to current version

set -e

echo "üîÑ Claude Memory System Update Utility"
echo "====================================="

# Detect OS
OS="unknown"
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    OS="linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    OS="mac"
elif [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
    OS="windows"
fi

# Cross-platform sed function
safe_sed() {
    local file=$1
    local pattern=$2
    local replacement=$3
    
    if [[ "$OS" == "mac" ]]; then
        sed -i '' "s/$pattern/$replacement/g" "$file"
    else
        sed -i "s/$pattern/$replacement/g" "$file"
    fi
}

# Check if Claude Memory is installed
if [ ! -d ".claude" ]; then
    echo "‚ùå No .claude directory found. Please run install.sh first."
    exit 1
fi

echo "üìç Detected existing Claude Memory installation"

# Create backup
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
BACKUP_DIR=".claude-backup-$TIMESTAMP"

echo "üì¶ Creating backup at $BACKUP_DIR..."
cp -r .claude "$BACKUP_DIR"
echo "‚úÖ Backup created"

# Update 1: Strategic file descriptions in INDEX.md
echo ""
echo "üîß UPDATING INDEX.MD STRATEGIC DESCRIPTIONS"
echo "==========================================="

if [ -f ".claude/INDEX.md" ]; then
    # Update product overview description
    if grep -q "App overview and features" .claude/INDEX.md; then
        safe_sed ".claude/INDEX.md" "App overview and features" "Product vision & user needs"
        echo "‚úÖ Updated product-overview.md description"
    else
        echo "‚ÑπÔ∏è  Product overview description already current"
    fi
    
    # Update epics description
    if grep -q "Major epics and milestones" .claude/INDEX.md; then
        safe_sed ".claude/INDEX.md" "Major epics and milestones" "Feature roadmap & sprint planning"
        echo "‚úÖ Updated epics.md description"
    else
        echo "‚ÑπÔ∏è  Epics description already current"
    fi
else
    echo "‚ö†Ô∏è  INDEX.md not found - skipping"
fi

# Update 2: Strategic context in Claude.md memory system map
echo ""
echo "üîß UPDATING CLAUDE.MD STRATEGIC CONTEXT"
echo "======================================"

if [ -f "Claude.md" ]; then
    # Add longterm/ directory to memory system map if missing
    if ! grep -q "longterm/.*Product vision" Claude.md; then
        # Find the memory system map and add longterm/ entry
        if grep -q "‚îú‚îÄ‚îÄ NORTH_STAR.md" Claude.md; then
            # Add after NORTH_STAR line
            safe_sed "Claude.md" "‚îú‚îÄ‚îÄ NORTH_STAR.md ‚Üê Current sprint goal" "‚îú‚îÄ‚îÄ NORTH_STAR.md ‚Üê Current sprint goal\n‚îú‚îÄ‚îÄ longterm/     ‚Üê Product vision & development strategy"
            echo "‚úÖ Added strategic context to memory system map"
        else
            echo "‚ö†Ô∏è  Could not find memory system map to update"
        fi
    else
        echo "‚ÑπÔ∏è  Strategic context already present"
    fi
    
    # Add strategic guidance to session recovery if missing
    if ! grep -q "For strategic decisions" Claude.md; then
        # Find always_read_first section and add strategic guidance
        if grep -q "always_read_first:" Claude.md; then
            safe_sed "Claude.md" "  - .claude/session/current.md  # Where we left off" "  - .claude/session/current.md  # Where we left off\n  - For strategic decisions: .claude/longterm/"
            echo "‚úÖ Added strategic guidance to session recovery"
        else
            echo "‚ö†Ô∏è  Could not find session recovery section to update"
        fi
    else
        echo "‚ÑπÔ∏è  Strategic guidance already present"
    fi
else
    echo "‚ö†Ô∏è  Claude.md not found - skipping"
fi

# Update 3: Ensure all required directories exist
echo ""
echo "üîß ENSURING COMPLETE DIRECTORY STRUCTURE"
echo "======================================="

REQUIRED_DIRS=(
    ".claude/longterm"
    ".claude/context"
    ".claude/session"
    ".claude/knowledge"
    ".claude/workspace/experiments"
    ".claude/workspace/temp/$(date +%Y-%m-%d)"
    ".claude/tools"
    ".claude/automation/hooks"
    ".claude/automation/scripts"
    ".claude/automation/templates"
    ".claude/archive/$(date +%Y-%m)"
)

for dir in "${REQUIRED_DIRS[@]}"; do
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
        echo "‚úÖ Created missing directory: $dir"
    fi
done

# Update 4: Ensure all required files exist with current templates
echo ""
echo "üîß CHECKING FOR MISSING FILES"
echo "============================"

# Create missing longterm files if they don't exist
if [ ! -f ".claude/longterm/product-overview.md" ]; then
    cat > .claude/longterm/product-overview.md << 'EOF'
# Product Overview
**Last Updated**: $(date -u +%Y-%m-%dT%H:%M:%SZ 2>/dev/null || date +%Y-%m-%dT%H:%M:%SZ)
**Status**: üîç REQUIRES ANALYSIS

## üéØ Product Identity
- **Name**: [Analyze from package.json, README, or code]
- **Tagline**: [One sentence description]
- **Problem**: [What problem does this solve?]
- **Solution**: [How does it solve it?]
- **Target Users**: [Who uses this application?]

## üåü Core Features
### Primary Features
- [Feature 1]: [Description from code analysis]
- [Feature 2]: [Description from code analysis]
- [Feature 3]: [Description from code analysis]

### Secondary Features
- [Feature A]: [Description]
- [Feature B]: [Description]

## üìä Success Metrics
- **Primary**: [Main success indicator]
- **Secondary**: [Supporting metrics]
- **Technical**: [Performance/reliability metrics]

## üîë Value Proposition
- **For Users**: [What value users get]
- **Differentiator**: [What makes this unique]
- **Business Value**: [Why this matters]
EOF
    echo "‚úÖ Created missing product-overview.md"
fi

if [ ! -f ".claude/longterm/epics.md" ]; then
    cat > .claude/longterm/epics.md << 'EOF'
# Development Epics
**Last Updated**: $(date -u +%Y-%m-%dT%H:%M:%SZ 2>/dev/null || date +%Y-%m-%dT%H:%M:%SZ)
**Status**: üîç REQUIRES ANALYSIS

## üìä Epic Status Overview
| Epic | Status | Progress | Target Date |
|------|--------|----------|-------------|
| [Epic 1] | [Active/Planned/Complete] | [0-100%] | [Date] |
| [Epic 2] | [Active/Planned/Complete] | [0-100%] | [Date] |

## üèÉ‚Äç‚ôÇÔ∏è Active Epics
### EPIC-1: [Name from analysis]
**Status**: üü° In Progress
**Description**: [What this epic accomplishes]

**Acceptance Criteria**:
- [ ] [Criteria 1 based on code analysis]
- [ ] [Criteria 2 based on requirements found]
- [ ] [Criteria 3 based on patterns seen]

## üìÖ Planned Epics
### EPIC-2: [Name from planning documents]
**Status**: üîµ Planned
**Priority**: High/Medium/Low
**Description**: [What this will accomplish]

## ‚úÖ Completed Epics
### EPIC-0: [Name from git history analysis]
**Status**: ‚úÖ Completed
**Description**: [What was accomplished]
EOF
    echo "‚úÖ Created missing epics.md"
fi

# Update 5: Update .gitignore if needed
echo ""
echo "üîß UPDATING .GITIGNORE"
echo "===================="

if [ -f ".gitignore" ]; then
    if ! grep -q "Claude Memory System" .gitignore; then
        echo "" >> .gitignore
        echo "# Claude Memory System" >> .gitignore
        echo ".claude/workspace/temp/" >> .gitignore
        echo ".claude/archive/" >> .gitignore
        echo "*.bak" >> .gitignore
        echo "‚úÖ Updated .gitignore"
    else
        echo "‚ÑπÔ∏è  .gitignore already configured"
    fi
fi

# Update 6: Install/update automation scripts
echo ""
echo "üîß UPDATING AUTOMATION SCRIPTS"
echo "============================="

# Only create automation scripts if the automation directory exists
if [ -d ".claude/automation/scripts" ]; then
    # Create/update validate.sh if it's missing or outdated
    if [ ! -f ".claude/automation/scripts/validate.sh" ] || ! grep -q "v2.0" .claude/automation/scripts/validate.sh; then
        echo "‚úÖ Would update validate.sh (implementation in main install.sh)"
    fi
    
    # Create/update sync.sh
    if [ ! -f ".claude/automation/scripts/sync.sh" ] || ! grep -q "v2.0" .claude/automation/scripts/sync.sh; then
        echo "‚úÖ Would update sync.sh (implementation in main install.sh)"
    fi
fi

# Update 7: Update git hooks if git repo exists
echo ""
echo "üîß UPDATING GIT HOOKS"
echo "===================="

if [ -d ".git" ]; then
    # Copy hooks from .claude/automation/hooks if they exist
    if [ -d ".claude/automation/hooks" ]; then
        if [ -f ".claude/automation/hooks/pre-commit" ]; then
            cp .claude/automation/hooks/pre-commit .git/hooks/
            chmod +x .git/hooks/pre-commit 2>/dev/null || true
            echo "‚úÖ Updated pre-commit hook"
        fi
        
        if [ -f ".claude/automation/hooks/post-commit" ]; then
            cp .claude/automation/hooks/post-commit .git/hooks/
            chmod +x .git/hooks/post-commit 2>/dev/null || true
            echo "‚úÖ Updated post-commit hook"
        fi
    fi
else
    echo "‚ÑπÔ∏è  No git repository - skipping hook installation"
fi

# Update 8: Update timestamps in all files
echo ""
echo "üîß UPDATING TIMESTAMPS"
echo "===================="

TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ 2>/dev/null || date +%Y-%m-%dT%H:%M:%SZ)

# Update Last Updated fields
find .claude -name "*.md" -type f | while read -r file; do
    if grep -q "Last Updated" "$file"; then
        safe_sed "$file" "\*\*Last Updated\*\*: .*" "**Last Updated**: $TIMESTAMP"
        echo "‚úÖ Updated timestamps in $(basename "$file")"
    fi
done

# Final validation
echo ""
echo "üîç RUNNING VALIDATION"
echo "===================="

if [ -f "audit-memory.sh" ]; then
    echo "Running automated audit..."
    bash audit-memory.sh
else
    echo "‚ÑπÔ∏è  audit-memory.sh not found - manual validation recommended"
fi

echo ""
echo "================================================"
echo "‚úÖ CLAUDE MEMORY SYSTEM UPDATE COMPLETE!"
echo "================================================"
echo ""
echo "üìã WHAT WAS UPDATED:"
echo "‚Ä¢ Strategic file descriptions in INDEX.md"
echo "‚Ä¢ Strategic context guidance in Claude.md"
echo "‚Ä¢ Directory structure completed"
echo "‚Ä¢ Missing files created"
echo "‚Ä¢ Git hooks updated"
echo "‚Ä¢ Timestamps refreshed"
echo ""
echo "üì¶ BACKUP LOCATION:"
echo "   $BACKUP_DIR"
echo ""
echo "üîÑ RECOMMENDED NEXT STEPS:"
echo "1. Review the updates in your memory files"
echo "2. Run: bash audit-memory.sh (if available)"
echo "3. Update longterm/ files with project-specific content"
echo "4. Test the memory system with Claude"
echo ""
echo "üìö FOR HELP:"
echo "‚Ä¢ See Claude Memory Audit Prompts.md for content quality checks"
echo "‚Ä¢ Use Claude Memory Prompting Guide.md for usage patterns"
echo ""
echo "Update completed: $(date)"